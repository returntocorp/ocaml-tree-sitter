#! /usr/bin/env bash
#
# Place the generated files into their own repo, to be used by an external
# repo as a submodule.
#
set -eu -o pipefail

prog_name=$(basename "$0")

usage() {
  cat <<EOF
Usage: $prog_name [options]
Options:
  --dry-run
      Do everything except committing the result to the git repo for
      ocaml-tree-sitter-lang. Also, this mode allows running without a
      clean git status in ocaml-tree-sitter. This is useful for testing.
  --help
      Print this message and exit.
EOF
}

error() {
  echo "Error in '$prog_name': $*" >&2
  exit 1
}

langs=()
dry_run=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run)
      dry_run=true
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      langs+=("$1")
  esac
  shift
done

id=$(git rev-parse --short HEAD)

if [[ "$dry_run" = false ]]; then
  if [[ -n "$(git status --porcelain)" ]]; then
    cat 2>&1 <<EOF
git status is not clean.
Possible resolutions:
- pass the --dry-run option to $prog_name.
- add and commit files until 'git status' shows a clean status.
EOF
    exit 1
  fi
fi

opt_run() {
  if [[ "$dry_run" = true ]]; then
    echo "[dry run] $*"
  else
    echo "[run] $*"
    "$@"
  fi
}

# Copy interesting files, such as the original grammar or the license.
#
# e.g.:
#   $ cat lang/go/fyi.list
#   semgrep-grammars/src/tree-sitter-go/grammar.js
#   semgrep-grammars/src/tree-sitter-go/LICENSE
#   semgrep-grammars/src/semgrep-go/grammar.js
#
copy_fyi_files() {
  if [[ -e "$fyi_list" ]]; then
    paths=$(cat "$fyi_list" | grep -v '^ *#' | grep -v '^ *$')
    for path in $paths; do
      mkdir -p "$fyi_dst"
      local src=$path
      local dst=$fyi_dst/$path
      if [[ ! -e "$src" ]]; then
        error "[$(pwd)] Missing file specified in fyi.list: $src"
      fi
      mkdir -p $(dirname "$dst")
      cp "$src" "$dst"
    done
  fi
}

if [[ ! -d ocaml-tree-sitter-lang ]]; then
  git clone git@github.com:returntocorp/ocaml-tree-sitter-lang.git
fi
# Stay on whatever branch is checked out.

dst_repo="ocaml-tree-sitter-lang"

# Copy the files that we find.
#
for lang in "${langs[@]}"; do
  make -C "$lang" clean
  make -C "$lang" gen
  if [[ -d "$lang"/ocaml-src ]]; then
    dst="$dst_repo"/"$lang"
    mkdir -p "$dst"
    cp -a "$lang"/ocaml-src/lib "$dst"
    cp -a "$lang"/ocaml-src/bin "$dst"

    # legacy
    if [[ -d "$lang"/orig ]]; then
      mkdir -p "$dst"/orig
    fi
    if [[ -f "$lang"/orig/grammar.js ]]; then
      cp -a "$lang"/orig/grammar.js "$dst"/orig
    fi
    if [[ -f "$lang"/orig/LICENSE ]]; then
      cp -a "$lang"/orig/LICENSE "$dst"/orig
    fi

    # new way of copying interesting files
    fyi_list="$lang"/fyi.list
    fyi_dst="$dst/fyi"
    copy_fyi_files
  else
    error "Missing folder $lang/ocaml-src"
  fi
done

(
  cd "$dst_repo"
  git add .
  git status
  opt_run git commit -m "Release files generated by ocaml-tree-sitter $id."
  branch=$(git rev-parse --abbrev-ref HEAD)
  opt_run git push origin "$branch"
)

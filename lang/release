#! /usr/bin/env bash
#
# Place the generated files into their own repo, to be used by an external
# repo as a submodule.
#
set -eu -o pipefail

error() {
  echo "Error: $*" >&2
  exit 1
}

langs=("$@")

id=$(git rev-parse --short HEAD)
if [[ -n "$(git status --porcelain)" ]]; then
  cat 2>&1 <<EOF
git status is not clean.
Please add and commit files until 'git status' shows a clean status,
then retry.
EOF
  exit 1
fi

if [[ ! -d ocaml-tree-sitter-lang ]]; then
  git clone git@github.com:returntocorp/ocaml-tree-sitter-lang.git
fi
# Stay on whatever branch is checked out.

repo="ocaml-tree-sitter-lang"

# Copy interesting files, such as the original grammar or the license.
#
# Assumptions:
# - current folder is the language's destination folder.
# - the files to copy are found in file 'fyi.list' and must exist.
# - the destination for these files is 'fyi/'.
# - the source path for these files is relative to ocaml-tree-sitter's
#   'lang' folder.
#
# e.g.:
#   $ cat lang/go/fyi.list
#   semgrep-grammars/src/tree-sitter-go/grammar.js
#   semgrep-grammars/src/tree-sitter-go/LICENSE
#   semgrep-grammars/src/semgrep-go/grammar.js
#
copy_fyi_files() {
  if [[ -e fyi.list ]]; then
    paths=$(cat fyi.list | grep -v '^ *#' | grep -v '^ *$')
    for path in $paths; do
      local src=../$path
      local dst=fyi/$path
      if [[ ! -e "$src" ]]; then
        error "[$(pwd)] Missing file specified in fyi.list: $src"
      fi
      mkdir -p $(dirname "$dst")
      cp "$src" "$dst"
      git add "$dst"
    done
  fi
}

# Copy the files that we find.
#
for lang in "${langs[@]}"; do
  make -C "$lang" clean
  make -C "$lang" gen
  if [[ -d "$lang"/ocaml-src ]]; then
    dst="$repo"/"$lang"
    mkdir -p "$dst"
    cp -a "$lang"/ocaml-src/lib "$dst"
    cp -a "$lang"/ocaml-src/bin "$dst"

    # legacy
    if [[ -d "$lang"/orig ]]; then
      mkdir -p "$dst"/orig
    fi
    if [[ -f "$lang"/orig/grammar.js ]]; then
      cp -a "$lang"/orig/grammar.js "$dst"/orig
    fi
    if [[ -f "$lang"/orig/LICENSE ]]; then
      cp -a "$lang"/orig/LICENSE "$dst"/orig
    fi

    # new way of copying interesting files
    (
      cd "$dst"
      copy_fyi_files
    )
  else
    error "Missing folder $lang/ocaml-src"
  fi
done

(
  cd "$repo"
  git add .
  git status
  git commit -m "Release files generated by ocaml-tree-sitter $id."
  branch=$(git rev-parse --abbrev-ref HEAD)
  git push origin "$branch"
)

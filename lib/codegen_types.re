module B = Ast_grammar_normalized;

let counter = ref(0);
let gen_intermediate_constructor = () => {
  incr(counter);
  "Intermediate_type" ++ string_of_int(counter^);
}

let wrap_ident= (ident:string) : string => {
   if (ident == "true" || ident == "false") {
      ident ++ "_bool"
   } else {
      ident
   }
}
let codegen_atom = (atom: B.atom): string => {
   switch(atom) {
   | B.TOKEN(None) => "string" /* tokens are empty */
   | B.TOKEN(Some(name)) => wrap_ident(name)
   | B.SYMBOL(name) => wrap_ident(name)
   }
}

let codegen_simple =  (simple: B.simple): string => {
   switch(simple) {
   | B.ATOM(atom) => codegen_atom(atom)
   | B.SEQ(atoms) => {
      /* codegen: (A,B,C,...) */
      let atom_strs = List.map(codegen_atom, atoms);
      "(" ++ String.concat(", ", atom_strs) ++ ")"
      }
   }
}

let codegen_rule_body = (rule_body: B.rule_body): string => {
   switch (rule_body) {
   | B.SIMPLE(simple) => {
      codegen_simple(simple);
      }
   | B.CHOICE(simples) => {
      /* codegen: A(...) | B(...) */
      let rhs = List.map(codegen_simple, simples);
      let im_types = List.map(
         (im_type: string) => {
            if (im_type == "true" || im_type == "false") {
               /* add extra quote for boolean */
               gen_intermediate_constructor() ++ "(" ++ wrap_ident(im_type) ++ ")"
            } else {
               gen_intermediate_constructor() ++ "(" ++ im_type ++ ")"
            }
         },
         rhs
      );
      "\n | " ++ String.concat("\n | ", im_types);
   }
   | B.REPEAT(simple) => {
      /* codegen: list(x) */
      let rhs = codegen_simple(simple);
      "list(" ++ rhs ++ ")"
   }
   | B.OPTION(simple) => {
      /* codegen: option(...) */
      let rhs = codegen_simple(simple);
      "option(" ++ rhs ++ ")"
   }
   }
}

let codegen_rules = (rules: list(B.rule)): (list(string)) => {
   let rules_sorted_by_type = List.sort(
      ((a_i, a_body): B.rule, (b_i, b_body): B.rule) => {
         if (a_i == "program") {
            /* make sure program is at last */
            1;
         } else if (b_i == "program") {
            -1;
         } else {
            let a_type = B.show_rule_body(a_body);
            let b_type = B.show_rule_body(b_body);
            /* make sure leaves are at top */
            switch(a_body) {
            | B.SIMPLE(B.ATOM(B.TOKEN(_))) => -1
            | _ => {
               switch(b_body) {
               | B.SIMPLE(B.ATOM(B.TOKEN(_))) => 1
               | _ => String.compare(a_type, b_type)
               }
            }
            }
         }
      },
      rules
   );
   List.map(((name, body): B.rule) => {
      wrap_ident(name) ++ " = " ++ codegen_rule_body(body)
   }, rules_sorted_by_type)
}

<<<<<<< HEAD
let codegen = ((_, rules): B.grammar): (string) => {
  counter := 0;
  let code_header = "/* Auto-generated by codegen_type */\n";
  let rule_strs = codegen_rules(rules);
  code_header ++ "type " ++ String.concat("\nand ", rule_strs) ++ ";";
=======
let codegen = ((_, rules): B.grammar): (list(B.rule), string) => {
  counter := 0;
  let code_header = "/* Auto-generated by codegen_type */\n";
  let rule_tuples = codegen_rule_bodies(rules);
  let rule_name_and_types = List.map(fst, rule_tuples);
  let rule_defs = List.map(snd, rule_tuples);
  let type_def = "type " ++ String.concat("\nand ", rule_defs) ++ ";";
  (rule_name_and_types, code_header ++ type_def);
>>>>>>> 2b51397... rebase
}
